''' 
https://leetcode.com/problems/plates-between-candles/description/
There is a long table with a line of plates and candles arranged on top of it. 
You are given a 0-indexed string s consisting of characters '*' and '|' only, where a
 '*' represents a plate and a '|' represents a candle.

You are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] 
denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the 
number of plates between candles that are in the substring. A plate is considered between 
candles if there is at least one candle to its left and at least one candle to its right in the substring.

For example, s = "||**||**|*", and a query [3, 8] denotes the substring "*||**|". 
The number of plates between candles in this substring is 2, as each of the two plates 
has at least one candle in the substring to its left and right.
Return an integer array answer where answer[i] is the answer to the ith query.
 
'''

class Solution:

    def platesBetweenCandles(self, s, queries):

        ary = [0]*len(s) 
        def get_cache():            
            
            right = len(s)-1
            while right>=0:
                if s[right]=='|':
                    break
                right-=1
            
            left = 0
            while left<len(s):
                if s[left]=='|':
                    break
                left+=1

            slow = left
            fast = left
            stars=0         
            while fast<right:
                while s[fast]=='*':
                    stars+=1
                    fast+=1
                
                for i in range(slow,fast+1):
                    ary[i]=stars 
                fast += 1
                slow = fast 
            
            for i in range(fast,len(s)):
                ary[i]=ary[i-1]

            return ary


        def index_adjustment(query_index, request):
 
            if request=='on_or_after':
                for i in indexes:
                    if query_index<=i:
                        return i
                #while query_index<len(s) and s[query_index]!='|':
                #    query_index+=1
                            
            if request=='on_or_before':
                for i in indexes[::-1]:
                    if query_index>=i:
                        return i
                #while query_index>=0 and s[query_index]!='|':
                #    query_index-=1
                 
            if s[query_index]=='|':
                return query_index
            
            return -1 #didnt find anything

        res = []
        cache = get_cache()
        indexes = []
        last_value = None
        for i,v in enumerate(cache):
            if v>0 and v!=last_value:                
                indexes.append(i)
                last_value=v


        
        for query in queries:
            fi = query[0]
            ti = query[1]+1

            fi_adj = index_adjustment(fi, 'on_or_after')
            ti_adj = index_adjustment(ti, 'on_or_before')

            if fi_adj==-1 or ti_adj==-1 or fi_adj>ti or ti_adj<fi:
                res.append(0) 
            else:            
                stars_from = cache[fi_adj]
                stars_to   = cache[ti_adj]
                res.append(stars_to - stars_from) 

        return res

if __name__=='__main__':
    print ('start...')

    my_str = "**|**|***|"
    queries = [[2,5],[5,9]]

    #my_str = "***|**|*****|**||**|*"
    #queries = [[1,17],[2,10]]

    #my_str = "***|**|*****|**||**|*"
    #queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]

    my_str = "*|*||||**|||||||*||*||*||**|*|*||*"
    queries =[[2,33],[2,32],[3,31],[0,33],[1,24],[3,20],[7,11],[5,32],[2,31],[5,31],[0,31],[3,28],[4,33],[6,29],[2,30],[2,28],[1,30],[1,33],[4,32],[5,30],[4,23],[0,30],[3,10],[5,28],[0,28],[4,28],[3,33],[0,27]]
    
    #my_str = "|********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************|||||*"
    #queries =[[0,33],[2,32],[3,31],[0,33],[1,24],[3,20],[7,11],[5,32],[2,31],[5,31],[0,31],[3,28],[4,33],[6,29],[2,30],[2,28],[1,30],[1,33],[4,32],[5,30],[4,23],[0,30],[3,10],[5,28],[0,28],[4,28],[3,33],[0,27]]


    s = Solution()
    res = s.platesBetweenCandles(my_str,queries)
    print (res)
    print ("END ")
 