''' 
https://leetcode.com/problems/plates-between-candles/description/
There is a long table with a line of plates and candles arranged on top of it. 
You are given a 0-indexed string s consisting of characters '*' and '|' only, where a
 '*' represents a plate and a '|' represents a candle.

You are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] 
denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the 
number of plates between candles that are in the substring. A plate is considered between 
candles if there is at least one candle to its left and at least one candle to its right in the substring.

For example, s = "||**||**|*", and a query [3, 8] denotes the substring "*||**|". 
The number of plates between candles in this substring is 2, as each of the two plates 
has at least one candle in the substring to its left and right.
Return an integer array answer where answer[i] is the answer to the ith query.
 
'''

class Solution:

    def platesBetweenCandles(self, s, queries):

        #my_str = "**|||*|*||**|*"
        left_indexes = []
        last_bar_index = -1
        for i, c in enumerate(s):
            if c=='*' and last_bar_index==-1:
                left_indexes.append(-1)
            elif c=='|' and last_bar_index==-1:
                left_indexes.append(i)
                last_bar_index = i
            elif c=='|' and last_bar_index!=-1:
                if s[i-1]=='*':
                    left_indexes.append(i)
                    last_bar_index=i
                else:
                    left_indexes.append(last_bar_index)
            elif c=='*':
                left_indexes.append(last_bar_index)

        
        right_indexes = [-1]*len(s)
        last_bar_index = -1
        i=len(s)-1
        for c in s[::-1]:
            if c=='*' and last_bar_index == -1:
                right_indexes[i]=-1
            elif c=='|' and last_bar_index == -1:
                right_indexes[i] = i
                last_bar_index=i
            elif c=='*' and last_bar_index != -1:
                right_indexes[i] = last_bar_index
            elif c=='|' and last_bar_index != -1:
                if s[i+1]=='*':
                    right_indexes[i] = i
                    last_bar_index = i
                else:
                    right_indexes[i] = last_bar_index
            i-=1

        #count stars
        stars = []
        num_stars = 0
        for e in s:
            if e=='*':
                num_stars+=1 
            stars.append(num_stars)
    
        res = []
        for query in queries:
            query_from = query[0]
            query_to = query[1]

            #adjustments
            index_left = right_indexes[query_from] #on or after
            index_right = left_indexes[query_to]

            if index_left>index_right:
                res.append(0)
                continue

            total_stars = stars[index_right] - stars[index_left]
            total_stars = max (0,total_stars)
            res.append(total_stars) 
            
        return res

if __name__=='__main__':
    print ('start...')

    my_str = "**|**|***|*"
    queries = [[2,5],[5,9]]

    #my_str = "***|**|*****|**||**|*"
    #queries = [[1,17],[2,10]]

    #my_str = "***|**|*****|**||**|*"
    #queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]

    my_str = "*|*||||**|||||||*||*||*||**|*|*||*"
    queries =[[2,33],[2,32],[3,31],[0,33],[1,24],[3,20],[7,11],[5,32],[2,31],[5,31],[0,31],[3,28],[4,33],[6,29],[2,30],[2,28],[1,30],[1,33],[4,32],[5,30],[4,23],[0,30],[3,10],[5,28],[0,28],[4,28],[3,33],[0,27]]
    #my_str = "**|||*|*||**|"
    #my_str = "||||||*"
    #queries =[[0,33],[2,32],[3,31],[0,33],[1,24],[3,20],[7,11],[5,32],[2,31],[5,31],[0,31],[3,28],[4,33],[6,29],[2,30],[2,28],[1,30],[1,33],[4,32],[5,30],[4,23],[0,30],[3,10],[5,28],[0,28],[4,28],[3,33],[0,27]]

    my_str = "*|*|||"
    queries = [[0,0],[1,3]]


    s = Solution()
    res = s.platesBetweenCandles(my_str,queries)
    print (res)
    print ("END ")
 